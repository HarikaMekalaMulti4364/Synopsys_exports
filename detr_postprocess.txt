import numpy as np

def postprocess_detections(dets, labels, score_threshold=0.5):
    """
    Post-process the detections.
    
    Parameters:
    - dets: numpy array of shape (1, 100, 5) where each detection has [x_min, y_min, x_max, y_max, score]
    - labels: numpy array of shape (1, 100) containing class labels for each detection
    - score_threshold: float, detections with scores below this threshold will be filtered out
    
    Returns:
    - filtered_dets: numpy array of shape (N, 5) where N is the number of detections above the score threshold
    - filtered_labels: numpy array of shape (N,) containing class labels for filtered detections
    """
    dets = dets[0]  # Remove batch dimension
    labels = labels[0]  # Remove batch dimension
    
    # Extract bounding boxes and scores
    boxes = dets[:, :4]  # (100, 4)
    scores = dets[:, 4]  # (100,)
    
    # Apply score threshold
    keep = scores > score_threshold
    filtered_dets = dets[keep]  # (N, 5) where N is the number of detections above the threshold
    filtered_labels = labels[keep]  # (N,)
    
    return filtered_dets, filtered_labels

# Example usage
dets = np.random.rand(1, 100, 5)  # Example detections
labels = np.random.randint(0, 10, (1, 100))  # Example labels
filtered_dets, filtered_labels = postprocess_detections(dets, labels)
print("Filtered Detections:\n", filtered_dets)
print("Filtered Labels:\n", filtered_labels)
